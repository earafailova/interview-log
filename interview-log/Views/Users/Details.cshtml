@model interview_log.Models.User
@{
    ViewBag.Title = "Details";
}
<script type="text/javascript">

    var CommentValidationError = 'The comment field cannot be empty';
    var FileValidationError = 'Choose the file you want to upload, please!'
    var TagValidationError = 'Tag name cannot be empty'

    function hideTagForm() {
        document.getElementById('tag').style.display = "none";
        document.getElementById('tag_button').style.display = "";
    }
    function showTagForm() {
        document.getElementById('tag').style.display = "";
        document.getElementById('tag_button').style.display = "none";
    }

    function showLarge(id, count) {
        smallAll(count);
        document.getElementById(id).style.display = "none";
        document.getElementById(id + '-large').style.display = "";
    }
    function smallAll(count) {
        for (var i = 0; i < count; i++) {
            document.getElementById(i + '-large').style.display = "none";
            document.getElementById(i).style.display = "";
        }
    }
    function validateComment(comment) {
        if (!comment.value)
            return showAlert(CommentValidationError);
        return true;
    }
    function validateTag(tag) {
        if (!tag.value)
            return showAlert(TagValidationError);
        return true;
    }
    function validateFile(file) {
        if (!file.value)
            return showAlert(FileValidationError);
        return true;
    }
    function validateInterview(interviewer) {
        var regex = /[-0-9a-zA-Z.]+@@[-0-9a-zA-Z.]+/;
        var val = interviewer.value;
        if (!val || !regex.test(val))
            return showAlert("You must specify interviewer email correctly!");
        return true;
    }

    function validateDateTime(dateTime) {
        if (!dateTime.value)
            return showAlert("Choose the date and the time!");
        return true;
    }
    function showAlert(text) {
        var doc = document.getElementById('alert');
        doc.textContent = text;
        doc.style.display = "";
        return false;
    }
        
    function ajaxIncDlCounter(fileId) {
        var xmlhttp = new XMLHttpRequest();
        xmlhttp.open("GET", "IncDlCounter/" + "?fileId=" + fileId, false);
        xmlhttp.send();
        var div = document.getElementById(fileId + '-dl-count');
        div.innerHTML++;
    }
</script>

<h2>Details</h2>
<div class="alert alert-danger" id="alert" style="display:none"></div>

<p>
    @Html.Partial("~/Views/Users/_Details.cshtml", Model)
</p>


<div id="tag" style="display:none">
    @using (Html.BeginForm(actionName: "Tag", controllerName: "Users"))
    {
        <b>Tag it:</b>
        <input type="text" name="tag" id="text" placeholder="Tag"/>
        <input type="text" name="info" id="info" placeholder="Description"/>
        <input type="submit" value="Okay!" class="btn btn-dark" onclick="hideTagForm(); return validateTag(tag)" />
    }
</div>
<a href="javascript:showTagForm()" id="tag_button" class="btn btn-dark btn-small"><i class="glyphicon glyphicon-ok"></i> Tag it!</a>

<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.Id }) |
    @Html.ActionLink("Back to List", "Index")
</p>

<p>
    @Html.Partial("~/Views/Users/_Attachments.cshtml", Model)
</p>


@Html.Partial("~/Views/Users/_Comments.cshtml", Model)

<div class="form-horizontal">

    <div class="form-group">
        @using (Html.BeginForm(actionName: "CreateInterview", controllerName: "Calendar"))
        {
            <b>create an interview:</b>
            <br/>
            <input name="interviewer" placeholder="interviewer" />
            <input name="interviewee" value="@Model.Email" style="display:none" />
            <input type="datetime-local" name="time"/>
            <input type="submit" value="Create interview!" class="btn btn-dark" onclick="return validateInterview(interviewer) && validateDateTime(time)" />
        }

    </div>
</div>
